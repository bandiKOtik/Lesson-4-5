using System.Text;
using static System.Console;

public class GameManager
{
    public const string startCommand = "start";
    public const string rulesCommand = "rules";
    public const string returnCommand = "return";
    public const string exitCommand = "exit";
    public const string currencyName = "рублей";

    static void Main()
    {
        Tools.SetupEncoding(Encoding.Unicode);

        do
        {
            InitializeGame();
        } while (Tools.ExitRequested == false);
    }

    public static void InitializeGame()
    {
        bool answerCorrect = false;
        do
        {
            Tools.WriteLineAfterClear("Добро пожаловать в игру \"Генератор монетки.\"! Введите команду для дальнейших действий:" +
                $"\n{startCommand.ToUpper()}: Начать игру." +
                $"\n{returnCommand.ToUpper()}: Вернуться в меню (работает только в игре)." +
                $"\n{rulesCommand.ToUpper()}: Прочесть правила (работает всегда)." +
                $"\n{exitCommand.ToUpper()}: Выйти из игры (работает всегда).");

            switch (Tools.GetUserInput())
            {
                case startCommand:
                    Tools.ChangeGameStatus(true);
                    Clear();
                    StartCoinGame();
                    answerCorrect = true;
                    break;

                case returnCommand:
                    break;

                case rulesCommand:
                    break;

                case exitCommand:
                    answerCorrect = true;
                    break;

                default:
                    Tools.InvalidCommandMessage();
                    break;
            }
        } while (answerCorrect == false);
    }

    public static void StartCoinGame()
    {
        Wallet wallet = new Wallet();
        Dictionary<int, string> answerVariants = new Dictionary<int, string>()
        {
            { 0, "Показать баланс" }, { 1, "Добавить на баланс" },{ 2, "Выбросить" },{ 3, "Обнулить баланс" },
        };
        CoinGenerator coinGenerator = new CoinGenerator(new List<int> { 1, 2, 5, 10, 50, 100, 200, 500, 1000, 2000, 5000 });

        while (Tools.GameStarted == true)
        {
            Clear();
            int generatedCoin = coinGenerator.GenerateCoin();

            bool answerCorrect = false;
            do
            {
                WriteLine($"Сгенерирована монета номиналом {generatedCoin} {GameManager.currencyName}, что с ней сделать? " +
                    $"(ответ цифрой, {GameManager.returnCommand.ToUpper()} чтобы вернуться.)");

                for (int i = 0; i < answerVariants.Count; i++)
                    WriteLine($"{i + 1}: {answerVariants[i]}.");

                string input = Tools.GetUserInput();
                int.TryParse(input, out int parsedValue);
                answerCorrect = Tools.DisableAnswerWhenCommandInput(input);

                if (answerCorrect == false)
                    switch (answerVariants[parsedValue - 1])
                    {
                        case "Показать баланс":
                            wallet.CheckBalance();
                            Tools.ReadKeyMessageClearAfter();
                            break;

                        case "Добавить на баланс":
                            wallet.AddToBalance(generatedCoin);
                            answerCorrect = true;
                            break;

                        case "Выбросить":
                            WriteLine($"Вы выбросили свою монету, номиналом {generatedCoin} {GameManager.currencyName} куда подальше.");
                            Tools.ReadKeyMessageClearAfter();
                            answerCorrect = true;
                            break;

                        case "Обнулить баланс":
                            wallet.ClearBalance();
                            wallet.CheckBalance();
                            Tools.ReadKeyMessageClearAfter();
                            break;

                        default:
                            Tools.InvalidCommandMessage();
                            break;
                    }
            } while (answerCorrect == false);
        }
    }
}

public class CoinGenerator
{
    Random random = new Random();
    public List<int> CoinDenomination { get; private set; }

    public CoinGenerator(List<int> coinDenomination)
    {
        CoinDenomination = coinDenomination;
    }

    public int GenerateCoin()
    {
        return CoinDenomination[random.Next(0, CoinDenomination.Count)];
    }
}

public class Wallet
{
    private int _playerBalance;
    public void CheckBalance() => Tools.WriteLineAfterClear($"Текущий баланс: {_playerBalance} {GameManager.currencyName}");
    public void AddToBalance(int value) => _playerBalance += value;
    public void ClearBalance() => _playerBalance = 0;
}

public static class Tools
{
    public static bool ExitRequested { get; private set; }
    public static bool GameStarted { get; private set; }
    public static string GetUserInput()
    {
        Write("> ");
        string userInput = ReadLine().ToLower();

        switch (userInput)
        {
            case GameManager.exitCommand:
                WriteLine("Программа завершает свою работу...");
                ExitRequested = true;
                ChangeGameStatus(false);
                ReadKeyMessage();
                break;

            case GameManager.rulesCommand:
                ShowRules();
                break;

            case GameManager.returnCommand:
                if (GameStarted == true)
                    ChangeGameStatus(false);
                else
                    ReturnCommandExeption();
                break;
        }

        return userInput;
    }

    public static void ChangeGameStatus(bool status)
        => GameStarted = status;

    public static void ReadKeyMessage()
    {
        WriteLine("Нажмите любую клавишу, чтобы продолжить...");
        ReadKey();
    }

    public static void ReadKeyMessageClearAfter()
    {
        ReadKeyMessage();
        Clear();
    }

    public static void WriteLineAfterClear(string message)
    {
        Clear();
        WriteLine(message);
    }

    public static bool DisableAnswerWhenCommandInput(string userInput)
    {
        switch (userInput)
        {
            case GameManager.returnCommand:
                return true;

            case GameManager.rulesCommand:
                return true;

            case GameManager.exitCommand:
                return true;
        }

        return false;
    }

    public static void ShowRules()
    {
        WriteLineAfterClear("После запуска перед вами появится один из четырёх боссов игры. " +
            "\nВаша задача победить босса.");
        ReadKeyMessageClearAfter();
    }

    public static void SetupEncoding(Encoding encoding)
    {
        InputEncoding = encoding;
        OutputEncoding = encoding;
    }

    public static void InvalidCommandMessage()
    {
        WriteLine("Неверная команда! Попробуйте ещё раз...");
        ReadKey();
    }

    public static void ReturnCommandExeption()
    {
        WriteLineAfterClear($"Команда {GameManager.returnCommand.ToUpper()} недоступна в меню игры!");
        ReadKeyMessageClearAfter();
    }
}
